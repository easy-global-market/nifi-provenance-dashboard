{"version":3,"file":"react-monaco-editor.js","mappings":"yKAUSA,E,iDCYT,SAASC,EAAwBC,GAG/B,OAAOC,EAAAA,EAAAA,GAAUD,GAAOE,aAC1B,C,wHDlBAC,EAAAA,GAAmBC,OAAO,CACxBC,MAAO,CACLC,IAAmC,QAA9BR,EAAAA,OAAOS,+BAAPT,IAAAA,EAAAA,EAAkC,WAAa,uBAIjD,MAAMU,EAAqBC,IAChC,MAAM,YAAEC,GAAgBD,EAElBE,GAAQC,EAAAA,EAAAA,MACRC,GAAsBC,EAAAA,EAAAA,cACzBC,KCWU,SAAsBA,EAAgBJ,GAEnD,MAAMK,EA1BR,SAAmBL,GACjB,QAAcM,IAAVN,EACF,MAAO,CAAC,EACH,CACL,MAAMK,EAAiC,CACrC,oBAAqBL,EAAMO,WAAWC,MAAMC,WAC5C,qBAAsBT,EAAMK,OAAOI,WAAWC,WAMhD,OAHAC,OAAOC,KAAKP,GAAQQ,SAASC,IAC3BT,EAAOS,GAAa1B,EAAwBiB,EAAOS,GAAW,IAEzDT,CACT,CACF,CAYiBU,CAAUf,GACzBI,EAAOY,OAAOC,YAAY,eAAgB,CACxCC,KAAM,UACNC,SAAS,EACTd,OAAQA,EAERe,MAAO,CACL,CAAEC,MAAO,aAAcC,WAAYlC,EAAwBY,aAAAA,EAAAA,EAAOuB,cAAcC,eAAe,YAC/F,CAAEH,MAAO,WAAYC,WAAYlC,EAAwBY,aAAAA,EAAAA,EAAOuB,cAAcC,eAAe,YAC7F,CAAEH,MAAO,MAAOC,WAAYlC,EAAwBY,aAAAA,EAAAA,EAAOuB,cAAcC,eAAe,cAI5FpB,EAAOY,OAAOC,YAAY,gBAAiB,CACzCC,KAAM,KACNC,SAAS,EACTd,OAAQA,EAERe,MAAO,CACL,CAAEC,MAAO,aAAcC,WAAYlC,EAAwBY,aAAAA,EAAAA,EAAOuB,cAAcC,eAAe,YAC/F,CAAEH,MAAO,WAAYC,WAAYlC,EAAwBY,aAAAA,EAAAA,EAAOuB,cAAcC,eAAe,YAC7F,CAAEH,MAAO,MAAOC,WAAYlC,EAAwBY,aAAAA,EAAAA,EAAOuB,cAAcC,eAAe,aAG9F,EDpCMC,CAAarB,EAAQJ,GACrBD,SAAAA,EAAcK,EAAO,GAEvB,CAACL,EAAaC,IAGhB,OACE,kBAAC0B,EAAAA,I,wUAAYA,CAAAA,CAAAA,EACP5B,G,WAAAA,CACJE,MAAOA,EAAM2B,OAAS,eAAiB,gBACvC5B,YAAaG,I","sources":["webpack://ick-buttontable-panel/../packages/grafana-ui/src/components/Monaco/ReactMonacoEditor.tsx","webpack://ick-buttontable-panel/../packages/grafana-ui/src/components/Monaco/theme.ts"],"sourcesContent":["import MonacoEditor, { loader as monacoEditorLoader, Monaco } from '@monaco-editor/react';\nimport React, { useCallback } from 'react';\n\nimport { useTheme2 } from '../../themes';\n\nimport defineThemes from './theme';\nimport type { ReactMonacoEditorProps } from './types';\n\nmonacoEditorLoader.config({\n  paths: {\n    vs: (window.__grafana_public_path__ ?? 'public/') + 'lib/monaco/min/vs',\n  },\n});\n\nexport const ReactMonacoEditor = (props: ReactMonacoEditorProps) => {\n  const { beforeMount } = props;\n\n  const theme = useTheme2();\n  const onMonacoBeforeMount = useCallback(\n    (monaco: Monaco) => {\n      defineThemes(monaco, theme);\n      beforeMount?.(monaco);\n    },\n    [beforeMount, theme]\n  );\n\n  return (\n    <MonacoEditor\n      {...props}\n      theme={theme.isDark ? 'grafana-dark' : 'grafana-light'}\n      beforeMount={onMonacoBeforeMount}\n    />\n  );\n};\n","import tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { Monaco, monacoTypes } from './types';\n\nfunction getColors(theme?: GrafanaTheme2): monacoTypes.editor.IColors {\n  if (theme === undefined) {\n    return {};\n  } else {\n    const colors: Record<string, string> = {\n      'editor.background': theme.components.input.background,\n      'minimap.background': theme.colors.background.secondary,\n    };\n\n    Object.keys(colors).forEach((resultKey) => {\n      colors[resultKey] = normalizeColorForMonaco(colors[resultKey]);\n    });\n    return colors;\n  }\n}\n\nfunction normalizeColorForMonaco(color?: string): string {\n  // monaco needs 6char hex colors\n  // see https://github.com/grafana/grafana/issues/43158\n  return tinycolor(color).toHexString();\n}\n\n// we support calling this without a theme, it will make sure the themes\n// are registered in monaco, even if the colors are not perfect.\nexport default function defineThemes(monaco: Monaco, theme?: GrafanaTheme2) {\n  // color tokens are defined here https://github.com/microsoft/vscode/blob/main/src/vs/platform/theme/common/colorRegistry.ts#L174\n  const colors = getColors(theme);\n  monaco.editor.defineTheme('grafana-dark', {\n    base: 'vs-dark',\n    inherit: true,\n    colors: colors,\n    // fallback syntax highlighting for languages that microsoft doesn't handle (ex cloudwatch's metric math)\n    rules: [\n      { token: 'predefined', foreground: normalizeColorForMonaco(theme?.visualization.getColorByName('purple')) },\n      { token: 'operator', foreground: normalizeColorForMonaco(theme?.visualization.getColorByName('orange')) },\n      { token: 'tag', foreground: normalizeColorForMonaco(theme?.visualization.getColorByName('green')) },\n    ],\n  });\n\n  monaco.editor.defineTheme('grafana-light', {\n    base: 'vs',\n    inherit: true,\n    colors: colors,\n    // fallback syntax highlighting for languages that microsoft doesn't handle (ex cloudwatch's metric math)\n    rules: [\n      { token: 'predefined', foreground: normalizeColorForMonaco(theme?.visualization.getColorByName('purple')) },\n      { token: 'operator', foreground: normalizeColorForMonaco(theme?.visualization.getColorByName('orange')) },\n      { token: 'tag', foreground: normalizeColorForMonaco(theme?.visualization.getColorByName('green')) },\n    ],\n  });\n}\n"],"names":["window","normalizeColorForMonaco","color","tinycolor","toHexString","monacoEditorLoader","config","paths","vs","__grafana_public_path__","ReactMonacoEditor","props","beforeMount","theme","useTheme2","onMonacoBeforeMount","useCallback","monaco","colors","undefined","components","input","background","secondary","Object","keys","forEach","resultKey","getColors","editor","defineTheme","base","inherit","rules","token","foreground","visualization","getColorByName","defineThemes","MonacoEditor","isDark"],"sourceRoot":""}